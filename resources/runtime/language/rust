as
async
await
break
const
continue
crate
dyn
else
enum
extern
false
fn
for
if
impl
in
let
loop
match
=>
->
Option
Result
Some(T)
None
Ok(T)
Err(E)
mod
move
mut
&mut
pub
ref
return
Self
self
static
struct
super
trait
true
type
union
unsafe
use
where
while
panic!()
println!("{}", T)
(T, E)
u8
u16
u32
u64
u128
usize
i8
i16
i32
i64
i128
isize
bool
char
str
&str
Vec::new()
Vec<T>
vec![]
HashMap
String
String::from("monkeytype")
collect::<Vec<i32>>()
box
lazy_static
iter()
filter(|x| x.is_ok())
<'a>
map
BTreeMap
VecDeque
LinkedList
HashSet
&'static
..=
?
macro_rules!
{:?}
format!
unwrap()
pub fn
#![inline]
#![inline(always)]
#![inline(never)]
#[derive(Clone, Copy)]
struct foobar
use std::io::ErrorKind::other;
pub fn new(foo: &str, bar: i16) -> Self
match foo
for bar in baz.into_iter()
